[1mdiff --git a/lib/utils/geminiService.ts b/lib/utils/geminiService.ts[m
[1mindex 5044d87..00a1336 100644[m
[1m--- a/lib/utils/geminiService.ts[m
[1m+++ b/lib/utils/geminiService.ts[m
[36m@@ -166,7 +166,10 @@[m [mexport class GeminiTorsoService {[m
     try {[m
       return new Promise((resolve, reject) => {[m
         const img = new Image();[m
[31m-        img.crossOrigin = 'anonymous';[m
[32m+[m[32m        // Don't set crossOrigin for data URLs - causes issues on iOS[m
[32m+[m[32m        if (!imageUrl.startsWith('data:')) {[m
[32m+[m[32m          img.crossOrigin = 'anonymous';[m
[32m+[m[32m        }[m
         [m
         img.onload = () => {[m
           const canvas = document.createElement('canvas');[m
[36m@@ -186,9 +189,12 @@[m [mexport class GeminiTorsoService {[m
           ctx.imageSmoothingQuality = 'high';[m
           ctx.drawImage(img, 0, 0, targetWidth, targetHeight);[m
           [m
[31m-          // Convert to data URL[m
[31m-          const resizedImageUrl = canvas.toDataURL('image/png');[m
[31m-          console.log(`‚úÖ Image resized to ${targetWidth}x${targetHeight}`);[m
[32m+[m[32m          // Convert to data URL with compression for iOS compatibility[m
[32m+[m[32m          // Use JPEG for smaller file size, with quality adjusted for iOS[m
[32m+[m[32m          const quality = this.isIOS() ? 0.7 : 0.85; // Lower quality on iOS[m
[32m+[m[32m          const format = this.isIOS() ? 'image/jpeg' : 'image/png'; // JPEG is smaller on iOS[m
[32m+[m[32m          const resizedImageUrl = canvas.toDataURL(format, quality);[m
[32m+[m[32m          console.log(`‚úÖ Image resized to ${targetWidth}x${targetHeight}, format: ${format}, quality: ${quality}`);[m
           resolve(resizedImageUrl);[m
         };[m
         [m
[36m@@ -205,12 +211,22 @@[m [mexport class GeminiTorsoService {[m
     }[m
   }[m
 [m
[32m+[m[32m  // Detect iOS devices[m
[32m+[m[32m  private isIOS(): boolean {[m
[32m+[m[32m    if (typeof window === 'undefined') return false;[m
[32m+[m[32m    return /iPad|iPhone|iPod/.test(navigator.userAgent) ||[m[41m [m
[32m+[m[32m           (navigator.platform === 'MacIntel' && navigator.maxTouchPoints > 1);[m
[32m+[m[32m  }[m
[32m+[m
   // Remove background from image to make it fully transparent[m
   private async removeBackground(imageUrl: string): Promise<string> {[m
     try {[m
       return new Promise((resolve, reject) => {[m
         const img = new Image();[m
[31m-        img.crossOrigin = 'anonymous';[m
[32m+[m[32m        // Don't set crossOrigin for data URLs - causes issues on iOS[m
[32m+[m[32m        if (!imageUrl.startsWith('data:')) {[m
[32m+[m[32m          img.crossOrigin = 'anonymous';[m
[32m+[m[32m        }[m
         [m
         img.onload = () => {[m
           const canvas = document.createElement('canvas');[m
[36m@@ -227,6 +243,14 @@[m [mexport class GeminiTorsoService {[m
           // Draw image[m
           ctx.drawImage(img, 0, 0);[m
           [m
[32m+[m[32m          // Skip background removal on iOS to reduce processing load[m
[32m+[m[32m          if (this.isIOS()) {[m
[32m+[m[32m            console.log('‚ö†Ô∏è Skipping background removal on iOS for performance');[m
[32m+[m[32m            const simpleImageUrl = canvas.toDataURL('image/jpeg', 0.7);[m
[32m+[m[32m            resolve(simpleImageUrl);[m
[32m+[m[32m            return;[m
[32m+[m[32m          }[m
[32m+[m[41m          [m
           // Get image data[m
           const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);[m
           const data = imageData.data;[m
